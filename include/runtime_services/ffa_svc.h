/*
 * Copyright (c) 2018-2023, Arm Limited. All rights reserved.
 *
 * SPDX-License-Identifier: BSD-3-Clause
 */

#ifndef FFA_SVC_H
#define FFA_SVC_H

#include <lib/utils_def.h>
#include <smccc.h>
#include <uuid.h>

/**
 * FFA error codes.
 * Don't forget to update `ffa_error_name` if you add a new one.
 */
/* clang-format off */
enum ffa_error {
	FFA_ERROR_NOT_SUPPORTED 	= -1,
	FFA_ERROR_INVALID_PARAMETER 	= -2,
	FFA_ERROR_NO_MEMORY 		= -3,
	FFA_ERROR_BUSY 			= -4,
	FFA_ERROR_INTERRUPTED 		= -5,
	FFA_ERROR_DENIED 		= -6,
	FFA_ERROR_RETRY 		= -7,
	FFA_ERROR_ABORTED 		= -8,
	FFA_ERROR_NO_DATA 		= -9,
};
/* clang-format on */

/* Return the name of the error code. */
static inline const char *ffa_error_name(enum ffa_error error)
{
	switch (error) {
	case FFA_ERROR_NOT_SUPPORTED:
		return "FFA_ERROR_NOT_SUPPORTED";
	case FFA_ERROR_INVALID_PARAMETER:
		return "FFA_ERROR_INVALID_PARAMETER";
	case FFA_ERROR_NO_MEMORY:
		return "FFA_ERROR_NO_MEMORY";
	case FFA_ERROR_BUSY:
		return "FFA_ERROR_BUSY";
	case FFA_ERROR_INTERRUPTED:
		return "FFA_ERROR_INTERRUPTED";
	case FFA_ERROR_DENIED:
		return "FFA_ERROR_DENIED";
	case FFA_ERROR_RETRY:
		return "FFA_ERROR_RETRY";
	case FFA_ERROR_ABORTED:
		return "FFA_ERROR_ABORTED";
	case FFA_ERROR_NO_DATA:
		return "FFA_ERROR_NO_DATA";
	}
	return "UNKNOWN";
}

/* The macros below are used to identify FFA calls from the SMC function ID */
#define FFA_FNUM_MIN_VALUE	U(0x60)
#define FFA_FNUM_MAX_VALUE	U(0x8C)
#define is_ffa_fid(fid) __extension__ ({		\
	__typeof__(fid) _fid = (fid);			\
	((GET_SMC_NUM(_fid) >= FFA_FNUM_MIN_VALUE) &&	\
	 (GET_SMC_NUM(_fid) <= FFA_FNUM_MAX_VALUE)); })

/* FFA_MSG_SEND helpers */
#define FFA_MSG_SEND_ATTRS_BLK_SHIFT	U(0)
#define FFA_MSG_SEND_ATTRS_BLK_MASK	U(0x1)
#define FFA_MSG_SEND_ATTRS_BLK		U(0)
#define FFA_MSG_SEND_ATTRS_BLK_NOT	U(1)
#define FFA_MSG_SEND_ATTRS(blk)		\
	(((blk) & FFA_MSG_SEND_ATTRS_BLK_MASK) \
	<< FFA_MSG_SEND_ATTRS_BLK_SHIFT)

/* Get FFA fastcall std FID from function number */
#define FFA_FID(smc_cc, func_num)			\
		((SMC_TYPE_FAST << FUNCID_TYPE_SHIFT) |	\
		 ((smc_cc) << FUNCID_CC_SHIFT) |	\
		 (OEN_STD_START << FUNCID_OEN_SHIFT) |	\
		 ((func_num) << FUNCID_NUM_SHIFT))

/**
 * FFA function numbers.
 * Don't forget to update `ffa_func_name` if you add a new one.
 */
#define FFA_FNUM_ERROR				U(0x60)
#define FFA_FNUM_SUCCESS			U(0x61)
#define FFA_FNUM_INTERRUPT			U(0x62)
#define FFA_FNUM_VERSION			U(0x63)
#define FFA_FNUM_FEATURES			U(0x64)
#define FFA_FNUM_RX_RELEASE			U(0x65)
#define FFA_FNUM_RXTX_MAP			U(0x66)
#define FFA_FNUM_RXTX_UNMAP			U(0x67)
#define FFA_FNUM_PARTITION_INFO_GET		U(0x68)
#define FFA_FNUM_ID_GET				U(0x69)
#define FFA_FNUM_MSG_POLL			U(0x6A) /* Legacy FF-A v1.0 */
#define FFA_FNUM_MSG_WAIT			U(0x6B)
#define FFA_FNUM_MSG_YIELD			U(0x6C)
#define FFA_FNUM_RUN				U(0x6D)
#define FFA_FNUM_MSG_SEND			U(0x6E) /* Legacy FF-A v1.0 */
#define FFA_FNUM_MSG_SEND_DIRECT_REQ		U(0x6F)
#define FFA_FNUM_MSG_SEND_DIRECT_RESP		U(0x70)
#define FFA_FNUM_MEM_DONATE			U(0x71)
#define FFA_FNUM_MEM_LEND			U(0x72)
#define FFA_FNUM_MEM_SHARE			U(0x73)
#define FFA_FNUM_MEM_RETRIEVE_REQ		U(0x74)
#define FFA_FNUM_MEM_RETRIEVE_RESP		U(0x75)
#define FFA_FNUM_MEM_RELINQUISH			U(0x76)
#define FFA_FNUM_MEM_RECLAIM			U(0x77)
#define FFA_FNUM_MEM_FRAG_RX 			U(0x7A)
#define FFA_FNUM_MEM_FRAG_TX 			U(0x7B)
#define FFA_FNUM_NORMAL_WORLD_RESUME		U(0x7C)

/* FF-A v1.1 */
#define FFA_FNUM_NOTIFICATION_BITMAP_CREATE	U(0x7D)
#define FFA_FNUM_NOTIFICATION_BITMAP_DESTROY	U(0x7E)
#define FFA_FNUM_NOTIFICATION_BIND		U(0x7F)
#define FFA_FNUM_NOTIFICATION_UNBIND		U(0x80)
#define FFA_FNUM_NOTIFICATION_SET		U(0x81)
#define FFA_FNUM_NOTIFICATION_GET		U(0x82)
#define FFA_FNUM_NOTIFICATION_INFO_GET		U(0x83)
#define FFA_FNUM_RX_ACQUIRE			U(0x84)
#define FFA_FNUM_SPM_ID_GET			U(0x85)
#define FFA_FNUM_MSG_SEND2			U(0x86)
#define FFA_FNUM_SECONDARY_EP_REGISTER		U(0x87)

/* FF-A v1.2 */
#define FFA_FNUM_CONSOLE_LOG			U(0x8A)
#define FFA_FNUM_PARTITION_INFO_GET_REGS	U(0x8B)
#define FFA_FNUM_EL3_INTR_HANDLE                U(0x8C)

/* FFA SMC32 FIDs */
#define FFA_ERROR		FFA_FID(SMC_32, FFA_FNUM_ERROR)
#define FFA_SUCCESS_SMC32	FFA_FID(SMC_32, FFA_FNUM_SUCCESS)
#define FFA_INTERRUPT		FFA_FID(SMC_32, FFA_FNUM_INTERRUPT)
#define FFA_VERSION		FFA_FID(SMC_32, FFA_FNUM_VERSION)
#define FFA_FEATURES		FFA_FID(SMC_32, FFA_FNUM_FEATURES)
#define FFA_RX_RELEASE		FFA_FID(SMC_32, FFA_FNUM_RX_RELEASE)
#define FFA_RXTX_MAP_SMC32	FFA_FID(SMC_32, FFA_FNUM_RXTX_MAP)
#define FFA_RXTX_UNMAP		FFA_FID(SMC_32, FFA_FNUM_RXTX_UNMAP)
#define FFA_MSG_SEND2		FFA_FID(SMC_32, FFA_FNUM_MSG_SEND2)
#define FFA_PARTITION_INFO_GET	FFA_FID(SMC_32, FFA_FNUM_PARTITION_INFO_GET)
#define FFA_ID_GET		FFA_FID(SMC_32, FFA_FNUM_ID_GET)
#define FFA_MSG_POLL		FFA_FID(SMC_32, FFA_FNUM_MSG_POLL)
#define FFA_MSG_WAIT		FFA_FID(SMC_32, FFA_FNUM_MSG_WAIT)
#define FFA_MSG_YIELD		FFA_FID(SMC_32, FFA_FNUM_MSG_YIELD)
#define FFA_RUN			FFA_FID(SMC_32, FFA_FNUM_RUN)
#define FFA_MSG_SEND		FFA_FID(SMC_32, FFA_FNUM_MSG_SEND)
#define FFA_MSG_SEND_DIRECT_REQ_SMC32 \
	FFA_FID(SMC_32, FFA_FNUM_MSG_SEND_DIRECT_REQ)
#define FFA_MSG_SEND_DIRECT_RESP_SMC32	\
	FFA_FID(SMC_32, FFA_FNUM_MSG_SEND_DIRECT_RESP)
#define FFA_MEM_DONATE_SMC32	FFA_FID(SMC_32, FFA_FNUM_MEM_DONATE)
#define FFA_MEM_LEND_SMC32	FFA_FID(SMC_32, FFA_FNUM_MEM_LEND)
#define FFA_MEM_SHARE_SMC32	FFA_FID(SMC_32, FFA_FNUM_MEM_SHARE)
#define FFA_MEM_RETRIEVE_REQ_SMC32 \
	FFA_FID(SMC_32, FFA_FNUM_MEM_RETRIEVE_REQ)
#define FFA_MEM_RETRIEVE_RESP	FFA_FID(SMC_32, FFA_FNUM_MEM_RETRIEVE_RESP)
#define FFA_MEM_RELINQUISH	FFA_FID(SMC_32, FFA_FNUM_MEM_RELINQUISH)
#define FFA_MEM_RECLAIM		FFA_FID(SMC_32, FFA_FNUM_MEM_RECLAIM)
#define FFA_MEM_FRAG_RX 	FFA_FID(SMC_32, FFA_FNUM_MEM_FRAG_RX)
#define FFA_MEM_FRAG_TX 	FFA_FID(SMC_32, FFA_FNUM_MEM_FRAG_TX)
#define FFA_MEM_DONATE_SMC64	FFA_FID(SMC_64, FFA_FNUM_MEM_DONATE)
#define FFA_MEM_LEND_SMC64	FFA_FID(SMC_64, FFA_FNUM_MEM_LEND)
#define FFA_MEM_SHARE_SMC64	FFA_FID(SMC_64, FFA_FNUM_MEM_SHARE)
#define FFA_MEM_RETRIEVE_REQ_SMC64 \
	FFA_FID(SMC_64, FFA_FNUM_MEM_RETRIEVE_REQ)
#define FFA_NOTIFICATION_BITMAP_CREATE	\
	FFA_FID(SMC_32, FFA_FNUM_NOTIFICATION_BITMAP_CREATE)
#define FFA_NOTIFICATION_BITMAP_DESTROY	\
	FFA_FID(SMC_32, FFA_FNUM_NOTIFICATION_BITMAP_DESTROY)
#define FFA_NOTIFICATION_BIND	FFA_FID(SMC_32, FFA_FNUM_NOTIFICATION_BIND)
#define FFA_NOTIFICATION_UNBIND FFA_FID(SMC_32, FFA_FNUM_NOTIFICATION_UNBIND)
#define FFA_NOTIFICATION_SET	FFA_FID(SMC_32, FFA_FNUM_NOTIFICATION_SET)
#define FFA_NOTIFICATION_GET	FFA_FID(SMC_32, FFA_FNUM_NOTIFICATION_GET)
#define FFA_NOTIFICATION_INFO_GET \
	FFA_FID(SMC_32, FFA_FNUM_NOTIFICATION_INFO_GET)
#define FFA_SPM_ID_GET		FFA_FID(SMC_32, FFA_FNUM_SPM_ID_GET)

/* Implementation defined SMC32 FIDs */
#define FFA_CONSOLE_LOG_SMC32	FFA_FID(SMC_32, FFA_FNUM_CONSOLE_LOG)

/* FFA SMC64 FIDs */
#define FFA_SUCCESS_SMC64	FFA_FID(SMC_64, FFA_FNUM_SUCCESS)
#define FFA_RXTX_MAP_SMC64	FFA_FID(SMC_64, FFA_FNUM_RXTX_MAP)
#define FFA_MSG_SEND_DIRECT_REQ_SMC64 \
	FFA_FID(SMC_64, FFA_FNUM_MSG_SEND_DIRECT_REQ)
#define FFA_MSG_SEND_DIRECT_RESP_SMC64	\
	FFA_FID(SMC_64, FFA_FNUM_MSG_SEND_DIRECT_RESP)
#define FFA_MEM_DONATE_SMC64	FFA_FID(SMC_64, FFA_FNUM_MEM_DONATE)
#define FFA_MEM_LEND_SMC64	FFA_FID(SMC_64, FFA_FNUM_MEM_LEND)
#define FFA_MEM_SHARE_SMC64	FFA_FID(SMC_64, FFA_FNUM_MEM_SHARE)
#define FFA_MEM_RETRIEVE_REQ_SMC64 \
	FFA_FID(SMC_64, FFA_FNUM_MEM_RETRIEVE_REQ)
#define FFA_SECONDARY_EP_REGISTER_SMC64 \
	FFA_FID(SMC_64, FFA_FNUM_SECONDARY_EP_REGISTER)
#define FFA_NOTIFICATION_INFO_GET_SMC64 \
	FFA_FID(SMC_64, FFA_FNUM_NOTIFICATION_INFO_GET)

#define FFA_FEATURES_MEM_RETRIEVE_REQ_NS_SUPPORT (UINT32_C(1) << 1)
#define FFA_PARTITION_INFO_GET_REGS_SMC64 \
	FFA_FID(SMC_64, FFA_FNUM_PARTITION_INFO_GET_REGS)

/* Implementation defined SMC64 FIDs */
#define FFA_CONSOLE_LOG_SMC64	FFA_FID(SMC_64, FFA_FNUM_CONSOLE_LOG)

static inline const char *ffa_func_name(uint32_t func)
{
	switch (func) {
	case FFA_ERROR:
		return "FFA_ERROR";
	case FFA_SUCCESS_SMC32:
		return "FFA_SUCCESS_SMC32";
	case FFA_INTERRUPT:
		return "FFA_INTERRUPT";
	case FFA_VERSION:
		return "FFA_VERSION";
	case FFA_FEATURES:
		return "FFA_FEATURES";
	case FFA_RX_RELEASE:
		return "FFA_RX_RELEASE";
	case FFA_RXTX_MAP_SMC32:
		return "FFA_RXTX_MAP_SMC32";
	case FFA_RXTX_UNMAP:
		return "FFA_RXTX_UNMAP";
	case FFA_PARTITION_INFO_GET:
		return "FFA_PARTITION_INFO_GET";
	case FFA_ID_GET:
		return "FFA_ID_GET";
	case FFA_MSG_POLL:
		return "FFA_MSG_POLL";
	case FFA_MSG_WAIT:
		return "FFA_MSG_WAIT";
	case FFA_MSG_YIELD:
		return "FFA_MSG_YIELD";
	case FFA_RUN:
		return "FFA_RUN";
	case FFA_MSG_SEND:
		return "FFA_MSG_SEND";
	case FFA_MSG_SEND_DIRECT_RESP_SMC32:
		return "FFA_MSG_SEND_DIRECT_RESP_SMC32";
	case FFA_MEM_DONATE_SMC32:
		return "FFA_MEM_DONATE_SMC32";
	case FFA_MEM_LEND_SMC32:
		return "FFA_MEM_LEND_SMC32";
	case FFA_MEM_SHARE_SMC32:
		return "FFA_MEM_SHARE_SMC32";
	case FFA_MEM_RETRIEVE_REQ_SMC32:
		return "FFA_MEM_RETRIEVE_REQ_SMC32";
	case FFA_MEM_RETRIEVE_RESP:
		return "FFA_MEM_RETRIEVE_RESP";
	case FFA_MEM_RELINQUISH:
		return "FFA_MEM_RELINQUISH";
	case FFA_MEM_RECLAIM:
		return "FFA_MEM_RECLAIM";
	case FFA_NOTIFICATION_BITMAP_CREATE:
		return "FFA_NOTIFICATION_BITMAP_CREATE";
	case FFA_NOTIFICATION_BITMAP_DESTROY:
		return "FFA_NOTIFICATION_BITMAP_DESTROY";
	case FFA_NOTIFICATION_BIND:
		return "FFA_NOTIFICATION_BIND";
	case FFA_NOTIFICATION_UNBIND:
		return "FFA_NOTIFICATION_UNBIND";
	case FFA_NOTIFICATION_SET:
		return "FFA_NOTIFICATION_SET";
	case FFA_NOTIFICATION_GET:
		return "FFA_NOTIFICATION_GET";
	case FFA_NOTIFICATION_INFO_GET:
		return "FFA_NOTIFICATION_INFO_GET";
	case FFA_SPM_ID_GET:
		return "FFA_SPM_ID_GET";
	case FFA_SUCCESS_SMC64:
		return "FFA_SUCCESS_SMC64";
	case FFA_RXTX_MAP_SMC64:
		return "FFA_RXTX_MAP_SMC64";
	case FFA_MSG_SEND_DIRECT_REQ_SMC64:
		return "FFA_MSG_SEND_DIRECT_REQ_SMC64";
	case FFA_MSG_SEND_DIRECT_RESP_SMC64:
		return "FFA_MSG_SEND_DIRECT_RESP_SMC64";
	case FFA_MEM_DONATE_SMC64:
		return "FFA_MEM_DONATE_SMC64";
	case FFA_MEM_LEND_SMC64:
		return "FFA_MEM_LEND_SMC64";
	case FFA_MEM_SHARE_SMC64:
		return "FFA_MEM_SHARE_SMC64";
	case FFA_MEM_RETRIEVE_REQ_SMC64:
		return "FFA_MEM_RETRIEVE_REQ_SMC64";
	case FFA_SECONDARY_EP_REGISTER_SMC64:
		return "FFA_SECONDARY_EP_REGISTER_SMC64";
	case FFA_NOTIFICATION_INFO_GET_SMC64:
		return "FFA_NOTIFICATION_INFO_GET_SMC64";
	case FFA_FEATURES_MEM_RETRIEVE_REQ_NS_SUPPORT:
		return "FFA_FEATURES_MEM_RETRIEVE_REQ_NS_SUPPORT";
	case FFA_PARTITION_INFO_GET_REGS_SMC64:
		return "FFA_PARTITION_INFO_GET_REGS_SMC64";
	case FFA_CONSOLE_LOG_SMC64:
		return "FFA_CONSOLE_LOG_SMC64";
	default:
		return "UNKNOWN";
	}
}

/*
 * Reserve a special value for traffic targeted to the Hypervisor or SPM.
 */
#define FFA_TARGET_INFO_MBZ		U(0x0)

/*
 * Reserve a special value for MBZ parameters.
 */
#define FFA_PARAM_MBZ			U(0x0)

#endif /* FFA_SVC_H */
