/*
 * Copyright (c) 2023, Advanced Micro Devices, Inc. All rights reserved.
 *
 * SPDX-License-Identifier: BSD-3-Clause
 */

#include <arch.h>
#include <asm_macros.S>
#include <platform_def.h>

	.global platform_get_core_pos
	.global plat_crash_console_init
	.global plat_crash_console_flush
	.global plat_crash_console_putc

/*----------------------------------------------------------------------
 * unsigned int platform_get_core_pos(u_register_t mpid)
 *
 * Function to calculate the core position.
 *
 * clobbers: x0 - x3
 * ---------------------------------------------------------------------
 */
func platform_get_core_pos
        /*
         * Check for MT bit in MPIDR. If not set, shift MPIDR to left to make it
         * look as if in a multi-threaded implementation.
         */
        tst     x0, #MPIDR_MT_MASK
        lsl     x3, x0, #MPIDR_AFFINITY_BITS
        csel    x3, x3, x0, eq

	/* x1 = core-id inside cluster */
	ubfx	x0, x3, #MPIDR_AFF0_SHIFT, #MPIDR_AFFINITY_BITS
	ubfx	x1, x3, #MPIDR_AFF1_SHIFT, #MPIDR_AFFINITY_BITS
	/* x2 = cluster-id */
	ubfx	x2, x3, #MPIDR_AFF2_SHIFT, #MPIDR_AFFINITY_BITS

	/* check if cpu_id valid */
	cmp x1, #PLATFORM_CORE_COUNT_PER_CLUSTER
	b.hi    error

	/* check if cluster valid */
	cmp x2, #PLATFORM_CLUSTER_COUNT
	b.hi    error

	/* core-position = cluster-id * cores per cluster + core-id */
	mov     x3, #PLATFORM_CORE_COUNT_PER_CLUSTER
	madd	x1, x2, x3, x1
	mov	x3, #PLATFORM_MAX_PE_PER_CPU
	madd	x0, x1, x3, x0
	ret
error:
	mov     x0, #-1
	ret
endfunc platform_get_core_pos

	/* ---------------------------------------------
	 * int plat_crash_console_init(void)
	 * Function to initialize the crash console
	 * without a C Runtime to print crash report.
	 * Clobber list : x0 - x4
	 * ---------------------------------------------
	 */
func plat_crash_console_init
	mov_imm	x0, CRASH_CONSOLE_BASE
	mov_imm	x1, PL011_UART_CLK_IN_HZ
	mov_imm	x2, PL011_BAUDRATE
	b	console_core_init
endfunc plat_crash_console_init

	/* ---------------------------------------------
	 * int plat_crash_console_putc(int c)
	 * Function to print a character on the crash
	 * console without a C Runtime.
	 * Clobber list : x1, x2
	 * ---------------------------------------------
	 */
func plat_crash_console_putc
	mov_imm	x1, CRASH_CONSOLE_BASE
	b	console_core_putc
endfunc plat_crash_console_putc

	/* ---------------------------------------------
	 * int plat_crash_console_flush()
	 * Function to force a write of all buffered
	 * data that hasn't been output.
	 * Out : return -1 on error else return 0.
	 * Clobber list : r0 - r1
	 * ---------------------------------------------
	 */
func plat_crash_console_flush
	mov_imm	x1, CRASH_CONSOLE_BASE
	b	console_core_flush
endfunc plat_crash_console_flush
